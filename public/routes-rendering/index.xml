<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creating Routes on Magicweb Documentation</title>
    <link>https://magicweb-docs.web.app/routes-rendering/</link>
    <description>Recent content in Creating Routes on Magicweb Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Sep 2021 11:31:36 -0400</lastBuildDate><atom:link href="https://magicweb-docs.web.app/routes-rendering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating Routes</title>
      <link>https://magicweb-docs.web.app/routes-rendering/creating-routes/</link>
      <pubDate>Fri, 03 Sep 2021 11:46:42 -0400</pubDate>
      
      <guid>https://magicweb-docs.web.app/routes-rendering/creating-routes/</guid>
      <description>Lets start by creating the same basic app as before.
from magicweb import Magicweb, run app = Magicweb(__file__) Now we can create a route.
A route is composed of a decorator and a function. The decorator is used to define the route&amp;rsquo;s path and the function is used to define the route&amp;rsquo;s behavior.
... @app.route(&amp;#34;/&amp;#34;) def index(request, response): response.text = &amp;#34;Hello World!&amp;#34; What this does is it defines the route&amp;rsquo;s path as / and when the route is called, it will call the function index.</description>
    </item>
    
    <item>
      <title>Render a Template</title>
      <link>https://magicweb-docs.web.app/routes-rendering/render/</link>
      <pubDate>Fri, 03 Sep 2021 12:27:54 -0400</pubDate>
      
      <guid>https://magicweb-docs.web.app/routes-rendering/render/</guid>
      <description>To render a template, you can use the render method of your app instance. Lets create a basic application and render a template.
from magicweb import Magicweb, run app = Magicweb(__file__) @app.route(&amp;#39;/&amp;#39;) def index(request, response): app.render(&amp;#39;index.html&amp;#39;, name=&amp;#39;MagicWeb&amp;#39;, the_answer=42) # app.render(&amp;#39;index.html&amp;#39;, {&amp;#39;name&amp;#39;: &amp;#39;MagicWeb&amp;#39;, the_answer: 42}) # You can also use a dictionary to pass variables to the template. run(app) Whats happening here?
 The render method is called on the app instance with the arguments template_name and **kwargs.</description>
    </item>
    
    <item>
      <title>Render Variables in HTML</title>
      <link>https://magicweb-docs.web.app/routes-rendering/renderhtml/</link>
      <pubDate>Fri, 03 Sep 2021 13:09:39 -0400</pubDate>
      
      <guid>https://magicweb-docs.web.app/routes-rendering/renderhtml/</guid>
      <description>Now that we have our variables passed to the template, we can render them in the template.
Lets create templates/index.html and add the following code:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Magicweb&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello {{ name }}&amp;lt;/h1&amp;gt; &amp;lt;h3&amp;gt;The answer to Life, the Universe, and Everything {{ the_answer }}&amp;lt;/h3&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; For the most part, it&amp;rsquo;s a normal html document. We can use the variables we created in the template by using the {{ }} syntax and placing th variable name inside the braces.</description>
    </item>
    
    <item>
      <title>Template Inheritance</title>
      <link>https://magicweb-docs.web.app/routes-rendering/template-inheritance/</link>
      <pubDate>Sun, 05 Sep 2021 13:18:38 -0400</pubDate>
      
      <guid>https://magicweb-docs.web.app/routes-rendering/template-inheritance/</guid>
      <description>In the previous section, we saw how we can render a template with variables and even use loops, and if statements. One thing that makes templating more powerful is the ability to inherit from other templates. This is done by using the {% extends &#39;base.html&#39; %} tag. This tag tells the template engine to use the template base.html as a base template, and then render the current template with the variables and loops from the base template.</description>
    </item>
    
  </channel>
</rss>
